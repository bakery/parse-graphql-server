{"version":3,"sources":["server/lib/query.js"],"names":["create","buildOptions","options","sessionToken","Object","assign","BasicQuery","objectClass","ObjectClass","attributes","Query","objectId"],"mappings":";;;;;;;;;;QAOgBA,M,GAAAA,M;;AALhB;;;;AACA;;;;;;;;+eAHA;;AAKA,IAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,YAAV;AAAA,SAA2BC,OAAOC,MAAP,CAAcH,WAAW,EAAzB,EAA6B,EAAEC,0BAAF,EAA7B,CAA3B;AAAA,CAArB;;AAEO,SAASH,MAAT,CAAgBG,YAAhB,EAA8B;AACnC,MAAI,CAACA,YAAL,EAAmB;AAAA,QACXG,UADW;AAAA;;AAEf,0BAAYC,WAAZ,EAAyB;AAAA;;AAAA,4HACjBA,WADiB;;AAEvB,cAAKC,WAAL,GAAmBD,WAAnB;AAFuB;AAGxB;;AALc;AAAA;AAAA,iCAOS;AAAA,cAAjBE,UAAiB,uEAAJ,EAAI;;AACtB,iBAAO,IAAI,KAAKD,WAAT,CAAqBC,UAArB,CAAP;AACD;AATc;;AAAA;AAAA,MACQ,eAAMC,KADd;;AAYjB,WAAOJ,UAAP;AACD;;AAdkC,MAgB7BI,KAhB6B;AAAA;;AAiBjC,mBAAYH,WAAZ,EAAyB;AAAA;;AAAA,iHACjB,mBAAYA,WAAZ,EAAyBJ,YAAzB,CADiB;;AAEvB,aAAKK,WAAL,GAAmB,mBAAYD,WAAZ,EAAyBJ,YAAzB,CAAnB;AAFuB;AAGxB;;AApBgC;AAAA;AAAA,+BAsBT;AAAA,YAAjBM,UAAiB,uEAAJ,EAAI;;AACtB,eAAO,IAAI,KAAKD,WAAT,CAAqBC,UAArB,CAAP;AACD;AAxBgC;AAAA;AAAA,4BA0B3BP,OA1B2B,EA0BlB;AACb,mHAAmBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAnB;AACD;AA5BgC;AAAA;AAAA,2BA8B5BD,OA9B4B,EA8BnB;AACZ,kHAAkBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAlB;AACD;AAhCgC;AAAA;AAAA,4BAkC3BD,OAlC2B,EAkClB;AACb,mHAAmBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAnB;AACD;AApCgC;AAAA;AAAA,0BAsC7BQ,QAtC6B,EAsCnBT,OAtCmB,EAsCV;AACrB,iHAAiBS,QAAjB,EAA2BV,aAAaC,OAAb,EAAsBC,YAAtB,CAA3B;AACD;AAxCgC;;AAAA;AAAA,IAgBf,eAAMO,KAhBS;;AA2CnC,SAAOA,KAAP;AACD","file":"query.js","sourcesContent":["/* eslint import/prefer-default-export: off */\n\nimport Parse from 'parse/node';\nimport { create as createModel } from './model';\n\nconst buildOptions = (options, sessionToken) => Object.assign(options || {}, { sessionToken });\n\nexport function create(sessionToken) {\n  if (!sessionToken) {\n    class BasicQuery extends Parse.Query {\n      constructor(objectClass) {\n        super(objectClass);\n        this.ObjectClass = objectClass;\n      }\n\n      create(attributes = {}) {\n        return new this.ObjectClass(attributes);\n      }\n    }\n\n    return BasicQuery;\n  }\n\n  class Query extends Parse.Query {\n    constructor(objectClass) {\n      super(createModel(objectClass, sessionToken));\n      this.ObjectClass = createModel(objectClass, sessionToken);\n    }\n\n    create(attributes = {}) {\n      return new this.ObjectClass(attributes);\n    }\n\n    count(options) {\n      return super.count(buildOptions(options, sessionToken));\n    }\n\n    find(options) {\n      return super.find(buildOptions(options, sessionToken));\n    }\n\n    first(options) {\n      return super.first(buildOptions(options, sessionToken));\n    }\n\n    get(objectId, options) {\n      return super.get(objectId, buildOptions(options, sessionToken));\n    }\n  }\n\n  return Query;\n}\n"]}